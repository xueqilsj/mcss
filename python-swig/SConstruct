import os
import sys

#scons debug=1 .
if ARGUMENTS.get('debug', 0):
	env = Environment(CCFLAGS = '-g')
else:
	env = Environment(CCFLAGS = '-Wall -O3')

env.Append(ENV=os.environ)   

if sys.platform[:3] == 'win':
	PY_INC = os.path.join(sys.prefix, 'include')
	PY_LIBS = os.path.join(sys.prefix, 'libs')
	NUMPY_INC = os.path.join(sys.prefix, 'Lib', 'site-packages', 'numpy', 'core', 'include')
	MYSHLIBSUFFIX='.pyd'
else:#for linux
	PY_INC = os.path.join(sys.prefix, 'include', 'python' + sys.version[:3])
	PY_LIBS = os.path.join(sys.prefix , 'libs')
	NUMPY_INC = ''# PY_INC
	MYSHLIBSUFFIX='.so'

COREDIR = '../core-cpp'
  
env.Append(
    CPPPATH=[PY_INC , COREDIR, NUMPY_INC],
    LIBPATH=[PY_LIBS],
    SWIGFLAGS=['-c++', '-python'],
    SWIGPATH=COREDIR
)

CORECPP = ['Ising.cpp', 'SParticle.cpp' , 'Potts.cpp', 'Random.cpp','Statis.cpp','LqFluid.cpp']
input_files = ['mcss.i', map((lambda f: os.path.join(COREDIR, f)), CORECPP)]
s = env.SharedLibrary(target='_mcss', SHLIBPREFIX='', SHLIBSUFFIX=MYSHLIBSUFFIX, source=input_files)
Clean(s, 'mcss.pyc') #remove log after testing

